{
  "name": "Nlpcalculator",
  "tagline": "Natural language calculator",
  "body": "# [Natural Language Calculator](http://ecararus.github.io/nlpcalculator) [![Build Status](https://travis-ci.org/ecararus/nlpcalculator.svg?branch=master)](https://travis-ci.org/ecararus/nlpcalculator)  [![Coverage Status](https://coveralls.io/repos/github/ecararus/nlpcalculator/badge.svg?branch=master)](https://coveralls.io/github/ecararus/nlpcalculator?branch=master)\r\n\r\nProblem:\r\nWrite a text-based console application to perform simple natural language calculations.\r\n\r\nFor example, if the user enters the text ‘two plus four’ the program would output the value ‘6’.\r\nThe program should be implemented in Java and without using libraries or scripting engines.\r\n\r\n## Specification\r\n### Supported Input Values\r\n - he supported input values are the whole numbers between zero and nine inclusive.\r\n - nput values must be expressed as text, e.g. ‘one’, ‘five’, etc\r\n - nput values are not case-sensitive. Both ‘two and ‘TWO’ are equally valid.\r\n\r\n###Supported Arithmetic Operators\r\n - he supported arithmetic operators and the permitted natural language aliases for these commands are detailed in the table below.\r\n - Aliases are not case-sensitive. Both ‘add’ and ‘ADD’ are equally valid.\r\n \r\n| Operator Permitted |          Aliases      | \r\n| ------------------ |:---------------------:|\r\n| Add (+)            | add, plus             |\r\n| Subtract (-)       | subtract, minus, less |\r\n| Multiply (*)       | multiply-by, times    |\r\n| Divide (/)         | divide-by, over       |\r\n\r\n\r\n## Operation Chaining\r\nAny number of operations may be chained together.\r\nFor example, these calculations are all valid\r\n..* ‘one plus two’\r\n..* ‘seven times eight minus nine’\r\n..* ‘four times five subtract six over one plus nine’\r\n\r\n## Operator Precedence\r\nWhen two or more operations are chained together, any multiply or divide operation must take\r\nprecedence over any add or subtract operation, similar to how a real calculator works.\r\nFor example, the calculation ‘one plus two times three’ will give the result ‘7’ not ‘9’.\r\n\r\nThe examples section contains further examples to illustrates operator precedence.\r\nNote that there is no requirement to support the use of brackets to alter operator precedence.\r\n\r\n## Examples.\r\n```\r\nPlease enter a calculation:\r\nnine over eight plus four times two divide-by three\r\nResult: 3.79\r\n\r\nPlease enter a calculation:\r\none plus two\r\nResult: 3\r\n\r\nPlease enter a calculation:\r\none plus two times three\r\nResult: 7\r\n\r\nPlease enter a calculation:\r\nnine minus three times seven\r\nResult: -12\r\n\r\nPlease enter a calculation:\r\nfour minus eight plus six times nine\r\nResult: 50\r\n\r\nPlease enter a calculation:\r\nseven over nine plus one\r\nResult: 1.78\r\n```\r\n## DISCLAIMER:\r\nPurpose of project is only educational.\r\nThis project should not be used for any commercial purpose.\r\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\r\nhttp://creativecommons.org/licenses/by-nc-sa/4.0/.\r\n\r\n## Author:\r\nEugeniu Cararus\r\ncararuseugeniu@gmail.com\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}